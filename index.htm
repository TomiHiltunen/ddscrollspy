<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>Dynamic Drive DHTML Scripts- DD ScrollSpy Menu</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" type="text/css" href="../../ddincludes/mainstyle.css" />

<link rel="stylesheet" href="ddscrollspydemo.css" />

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>

<script src="ddscrollspy.js">

/*
* DD ScrollSpy Menu Script (c) Dynamic Drive (www.dynamicdrive.com)
* Last updated: Dec 29th, 12'
* Visit http://www.dynamicdrive.com/ for this script and 100s more.
*/

</script>

<script>

jQuery(function($){ // on document load
	$('#horizontalmenu').ddscrollSpy({ // initialize first demo
		scrolltopoffset: -60
	})

	$('#verticalspymenu').ddscrollSpy({ // initialize 2nd demo
		spytarget: document.getElementById('contentcontainer'),
		scrollduration: 300 // <-- no comma after last option!
	})
})

function dynamicadditem(){ // function that dynamically adds a new menu item to first demo, spying on #para6
	$('#verticalspymenu').append('<li><a href="#para5">Paragraph 5</a></li>')
	$('#verticalspymenu').trigger('updatespy')
}

</script>

</head>

<body>

<table id="maintable" border="0" width="100%" cellspacing="0" cellpadding="0">
  <tr>
    <td id="leftbar" valign="top">
<!--#include virtual="/ddincludes/leftnav.htm" -->
    </td>
    <td id="spacertd">
<img src="../spacer.gif" id="spacergif">
    </td>
    <td valign="top" id="contentarea">
    
<!--#include virtual="/ddincludes/contentheader.htm" -->

<div id="scriptheader"><span class="compatlist">FF2+ IE8+ Opr8+</span> 
  <h3>DD ScrollSpy Menu</h3></div> 
<div id="scriptheaderFoot"><span class="rightit"></span> <b>Author:</b>  
  <span id="ddauthor">Dynamic Drive</span></div>

      <p id="description" align="left"><strong>Description: </strong>For long pages with lots of 
		content, keeping the user oriented and knowing where within the page 
		he/she is at all times can be challenging. DD ScrollSpy Menu solves this 
		problem, by letting you create a menu whose menu items are automatically 
		highlighted based on the portion of the page the user is currently 
		viewing. As the user scrolls the page, the menu item that points to that 
		section is highlighted (via the injection of a desired CSS class to 
		style it). The script also works on scrollable DIVs within the page to 
		spy on their scroll positions instead. DD ScrollSpy &quot;spies&quot; on the visitor's position on the page, 
but for their benefit (and in turn yours)!</p>
<div id="demos">
<p align="left"><strong>Demos: (Look at the top fixed menu above, plus the side 
menu below)</strong></p>
    <p align="left"><!--webbot bot="HTMLMarkup" startspan --><ul id="horizontalmenu" class="underlinemenu">
<li><a href="#description">Description</a></li>
<li><a href="#demos">Demos</a></li>
<li><a href="#directions">Directions</a></li>
<li><a href="#setup">Set Up</a></li>
<li><a href="#functionoptions">Function Options</a></li>
</ul>

<div style="float:left; margin-right:15px; width:150px">
	<ul  id="verticalspymenu" class="shadowblockmenu-v">
	<li><a href="#para1">Paragraph 1</a></li>
	<li><a href="#para2">Paragraph 2</a></li>
	<li><a href="#para3">Paragraph 3</a></li>
	<li><a href="#para4">Paragraph 4</a></li>
	</ul>

<br />
<a href="javascript:dynamicadditem()" style="font-weight:bold">Click to dynamically add another menu item</a>

</div>


<div id="contentcontainer" style="width:500px; height:200px; overflow-y:scroll; border:1px solid gray; font:bold 18px Arial; float:left; background:yellow; position:relative">
	<p id="para1" style="height:400px; background:#d5e9b2">Paragraph 1</p>
	<p id="para2" style="height:600px; background:#f7de90">Paragraph 2</p>
	<p id="para3" style="height:700px; background:#9af5ed">Paragraph 3</p>
	<p id="para4" style="height:500px; background:#fbd0e3">Paragraph 4</p>
	<p id="para5" style="height:300px; background:#cbffe1">Paragraph 5</p>
</div>

<br style="clear:left" /><!--webbot bot="HTMLMarkup" endspan i-checksum="48528" --></p>
</div>
    <hr size="1">
    <div id="directions">
    <p align="left"><strong>Directions</strong></p>
      <p align="left"><b>Step 1:</b> This script uses the following external files. 
      Download them below (right click, and select &quot;Save As&quot;):</p>
<ul>
	<li>
	<a href="ddscrollspy.js">ddscrollspy.js</a></li>
	<li>
	<a href="ddscrollspydemo.css">ddscrollspydemo.css</a></li>
</ul>
<p align="left"><b>Step 2:</b> Add the below code to the HEAD section of your 
page:</p>
    <form><div
      align="left">
<a class="selectall" href="javascript:highlight(0)">Select All</a><br>
      <textarea class="codecontainer" rows="8" name="S2" cols="45" wrap="virtual"><link rel="stylesheet" href="ddscrollspydemo.css" />

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>

<script src="ddscrollspy.js">

/*
* DD ScrollSpy Menu Script (c) Dynamic Drive (www.dynamicdrive.com)
* Last updated: Dec 29th, 12'
* Visit http://www.dynamicdrive.com/ for this script and 100s more.
*/

</script>

<script>

jQuery(function($){ // on document load
	$('#horizontalmenu').ddscrollSpy({ // initialize first demo
		scrolltopoffset: -50
	})

	$('#verticalspymenu').ddscrollSpy({ // initialize 2nd demo
		spytarget: document.getElementById('contentcontainer'),
		scrollduration: 300 // <-- no comma after last option!
	})
})

function dynamicadditem(){ // function that dynamically adds a new menu item to first demo, spying on #para6
	$('#verticalspymenu').append('<li><a href="#para5">Paragraph 5</a></li>')
	$('#verticalspymenu').trigger('updatespy')
}

</script></textarea></div>
    </form>
      <p align="left"><strong>Step 2: </strong>Then, add the below sample markup 
		to your page:</p>
    <form><p><a class="selectall" href="javascript:highlight(1)">Select All</a><br>
      <textarea class="codecontainer" rows="8" name="S1" cols="45" wrap="virtual"><!-- Scroll Spy Menu 1 -->

<ul id="horizontalmenu" class="underlinemenu">
<li><a href="#section1">Section 1</a></li>
<li><a href="#section2">Section 2</a></li>
<li><a href="#section3">Section 3</a></li>
<li><a href="#section4">Section 4</a></li>
<li><a href="#section5">Section 5</a></li>
</ul>

<!-- Scroll Spy Menu 2 -->

<div style="float:left; margin-right:15px; width:150px; margin-top: 120px">
	<ul  id="verticalspymenu" class="shadowblockmenu-v">
	<li><a href="#para1">Paragraph 1</a></li>
	<li><a href="#para2">Paragraph 2</a></li>
	<li><a href="#para3">Paragraph 3</a></li>
	<li><a href="#para4">Paragraph 4</a></li>
	</ul>

<br />
<a href="javascript:dynamicadditem()" style="font-weight:bold">Click to dynamically add another menu item</a>

</div>

<!-- Contents that Scroll Spy Menu 2 is spying on -->

<div id="contentcontainer" style="width:500px; height:200px; overflow-y:scroll; border:1px solid gray; font:bold 18px Arial; float:left; background:yellow; position:relative; margin-top: 120px">
	<p id="para1" style="height:400px; background:#d5e9b2">Paragraph 1</p>
	<p id="para2" style="height:600px; background:#f7de90">Paragraph 2</p>
	<p id="para3" style="height:700px; background:#9af5ed">Paragraph 3</p>
	<p id="para4" style="height:500px; background:#fbd0e3">Paragraph 4</p>
	<p id="para5" style="height:300px; background:#cbffe1">Paragraph 5</p>
</div>

<br style="clear:left" />

<!-- Contents that Scroll Spy Menu 1 is spying on -->

<div id="section1" style="height:300px;">
<h2>This is section 1</h2>
</div>

<div id="section2" style="height:400px;">
<h2>This is section 2</h2>
</div>

<div id="section3" style="height:700px;">
<h2>This is section 3</h2>
</div>

<div id="section4" style="height:600px;">
<h2>This is section 4</h2>
</div>

<div id="section5" style="height:1000px;">
<h2>This is section 5</h2>
</div></textarea></p>
    </form>
    </div>
    <div id="setup">
      <h3 align="left"><u>DD ScrollSpy Menu set up</u></h3>
      <div style="border-right:12px solid #9fdc7b"><p align="left">To set up a DD ScrollSpy Menu, call the jQuery function <code>ddscrollSpy()</code> on the menu that will act as the spy menu:</p>
<p class="codehighlight" align="left">jQuery(function($){ // on document 
		load<br>&nbsp; $(<font color="#FF0000"><b>menuselector</b></font>).ddscrollSpy(options)<br>})</p>
<p align="left">Where <b>&quot;<font color="#FF0000">menuselector</font>&quot;</b> is a valid jQuery selector referencing 
		the desired menu on the page (ie: <code>$(&quot;#horizontalmenu&quot;).ddscrollspy()</code>), and 
<code>options</code> is a list of options for this 
		DD ScrollSpy Menu instance. The menu typically would be a fixed menu, 
		with menu items pointing to various sections within the page:</p></div>

		<div style="border-right:12px solid #de7039"><p class="codehighlight" align="left">&lt;ul id=&quot;horizontalmenu&quot; class=&quot;underlinemenu&quot;&gt;<br>&lt;li&gt;&lt;a href=&quot;#description&quot;&gt;Description&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=&quot;#demos&quot;&gt;Demos&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=&quot;#directions&quot;&gt;Directions&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Set Up&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=&quot;#section5&quot;&gt;Section 5&lt;/a&gt;&lt;/li&gt;<br>&lt;/ul&gt;</p>
<p align="left">As you can see, it's just a regular menu with its menu items 
pointing to the IDs of the sections of the page they corresponds to (prefixed by 
&quot;#&quot;).</p></div>
		<div style="border-right:12px solid #d58424"><p align="left">To segment each portion of the page to correspond with 
		the menu items above, just wrap each content in a DIV tag with a 
		matching ID attribute, such as:</p>
<p class="codehighlight" align="left">
<span style="display:block; background:yellow; font:bold 14px Verdana; margin-bottom:1em">Recommended way to segment your content</span>
<b>&lt;div id=&quot;description&quot;&gt;</b><br>This is some content...<br>&quot;<br>&lt;/div&gt;<br>
<br><b>&lt;div id=&quot;demos&quot;&gt;</b><br>This is some content...<br>&quot;<br>&lt;/div&gt;<br>
<br><b>&lt;div id=&quot;directions&quot;&gt;</b><br>This is some content...<br>&quot;<br>&lt;/div&gt;<br>
<br><b>&lt;div id=&quot;setup&quot;&gt;</b><br>This is some content...<br>&quot;<br>&lt;/div&gt;</p>
<p align="left">It's important to wrap each content entirely using such 
		a DIV tag if you want the calculations to be accurate as far as which 
		content the script considers to be currently visible on the screen. The 
		less desirable alternative is to just define HTML anchors on the page to 
		indicate the start of each content, though the calculations will be 
		imprecise with such a set up:</p>
<p class="codehighlight" align="left">
<span style="display:block; background:#f4ca4b; font:bold 14px Verdana; margin-bottom:1em">Less than ideal way to segment your content</span><b> 
		&lt;a id=&quot;description&quot;&gt;&lt;/a&gt;</b>
		This is some content...<br><br><b>&lt;a id=&quot;demos&quot; 
	<font color="#FF0000">data-range=&quot;400&quot;</font>&gt;&lt;/a&gt;</b>
		This is some content...<br><br><b>&lt;a id=&quot;directions&quot;&gt;&lt;/a&gt;</b>
		This is some content...<br><br><b>&lt;a id=&quot;setup&quot;&gt;&lt;/a&gt;</b>
		This is some content...</p>
<p align="left">In the less desirable set up above, notice the custom 
		attribute &quot;<code><font color="#FF0000">data-range</font></code>&quot;. You 
		can make use of this attribute to manually tell the script how tall the 
		content in question is when segmenting your content using HTML anchors 
		that <b>do NOT</b> wrap around the entire content in question. It's 
		still not ideal, as apart from the extra work needed to estimate how 
		tall the content is manually, depending on whether your page is fluid, 
		resizing the page may alter the content's height.</p>
				</div>
				</div>
		<div id="functionoptions">
			<h3 align="left"><code>$(menuselector).ddscrollspy()</code> options</h3>

	<p align="left">As mentioned in the first step to setting up a DD ScrollSpy 
	Menu, you should call <code>ddscrollSpy()</code> in the HEAD section of your 
	page to initialize the menu. The following lists the options you can pass 
	into this function, all of which are optional:</p>
	<table border="1" width="95%" cellspacing="0" cellpadding="3">
		<tr>
			<td width="25%" bgcolor="#D8EA99" valign="top"><b>option</b></td>
			<td width="75%" bgcolor="#D8EA99" valign="top"><b>Description</b></td>
		</tr>
		<tr>
			<td width="25%" valign="top"><code>
			<span style="background-color: #EFEFEF">spytarget</span></code><p>
			<i>defaults to window</i></td>
			<td width="75%" valign="top">The DOM object DD Scrollspy should monitor 
		for scroll behaviour. Defaults to the <code>window</code> object, which 
		is the desired setting in most cases when you're updating a menu based 
		on the scroll position of the document itself.<p>If you wish to monitor 
		the scroll position of a scrollable DIV (and the contents within it)&nbsp; 
		instead of the page itself, set <code>spytarget</code> to reference this 
		DIV instead, such as:</p>
			<p class="codehighlight">$('#horizontalmenu').ddscrollSpy({<br>&nbsp;spytarget: document.getElementById('scrolldiv')<br>&quot;<br>})</td>
		</tr>
		<tr>
			<td width="25%" valign="top"><code>scrolltopoffset: integer</code><p>
			<i>defaults to 0</i></td>
			<td width="75%" valign="top">Sets an offset from the top of each content 
		within <code>spytarget</code> the script should include when calculating 
		whether that content is currently visible on the screen. By default, a 
		piece of content is considered visible when its top corner or below is 
		showing inside the viewable area of the browser. You can decrease or 
		increase that threshold by defining a negative/ positive integer (pixel 
		unit assumed) to <code>scrolltopoffset</code>.<p>The value of this 
			option will also be included when scrolling to each piece of content 
			via clicking on the corresponding menu. If your spy menu is a fixed 
			menu located at the very top of the page that never scrolls, setting
			<code>scrolltopoffset</code> to - (negative) height of the menu so 
			the top portion of each content does not get obscured when the 
			script scrolls to it:<p class="codehighlight">$('#horizontalmenu').ddscrollSpy({<br>
&nbsp;spytarget: document.getElementById('test'),<br>&nbsp;<b>scrolltopoffset: 
			-50</b> // if spy menu is a fixed top menu, set this to -height of 
			menu so it doesn't obscure content<br>})</td>
		</tr>
		<tr>
			<td width="25%" valign="top"><code>scrollbehavior: &quot;jump | smooth&quot;</code><p>defaults to &quot;smooth&quot;</td>
			<td width="75%" valign="top">Sets the scroll behaviour when navigating to 
		each piece of monitored content via clicking on the menu. Set to <code>jump</code> to hop straight to the associated content without any scroll 
		animation.<p style="border:1px solid red"><b>Important:</b> In IE9 and 
			below, the <code>scrollbehavior</code> will always to set to &quot;jump&quot; 
			if the <code>spytarget</code> option is set to <code>window</code> even when you've set to &quot;<code>smooth</code>&quot;. This is due to the scrolling 
			animation conflicting with the preservation of the browser's 
			location hash in said browsers (specifically, ones that don't 
			support HTMl5's pushstate function).</td>
		</tr>
		<tr>
			<td width="25%" valign="top"><code>scrollduration: integer</code><p>defaults 
		to 500</td>
			<td width="75%" valign="top">If <code>scrollbehavior</code> above is set 
		to &quot;smooth&quot; (default setting), this option sets the duration of the 
		scroll animation (in milliseconds).</td>
		</tr>
		<tr>
			<td width="25%" valign="top"><code>highlightclass: &quot;string&quot;</code><p>defaults to &quot;selected&quot;</td>
			<td width="75%" valign="top">Sets the CSS class that gets added to the 
		menu item corresponding to the content currently visible on the page. 
		Defaults to &quot;<code>selected</code>&quot;, which you should style in your CSS.</td>
		</tr>
		<tr>
			<td width="25%" valign="top" bgcolor="#D8EA99"><b>Method</b></td>
			<td width="75%" valign="top" bgcolor="#D8EA99">&nbsp;</td>
		</tr>
		<tr>
			<td width="25%" valign="top"><code>trigger('updatespy')</code></td>
			<td width="75%" valign="top">Performs a re-initialization of the target 
		menu for any content referenced by the menu to spy on. Useful if you've dynamically 
		added menu items to the target menu pointing to new content, 
		or have made changes to the page in general that affect the dimensions 
		or scroll positions of the existing spied on contents. More info below.</td>
		</tr>
	</table>
	<p align="left">That's it- the &quot;JavaScript&quot; item will be selected automatically 
when the menu is initialized.</p>
</div>
<h4 align="left">Dynamically adding a 
menu item to a ScrollSpy Menu</h4>
<p align="left">You can dynamically add menu items to your Spy Menu to spy on 
additional content on the page even after the page has loaded. Adding a menu 
item itself just involves using standard DOM or jQuery methods to augment the 
menu's markup, such as:</p>
<p class="codehighlight" align="left">$('#verticalspymenu').append('&lt;li&gt;&lt;a href=&quot;#para5&quot;&gt;Paragraph 
5&lt;/a&gt;&lt;/li&gt;')</p>
<p align="left">The above jQuery code when run adds a new LI element to the menu 
with ID=&quot;<code>verticalspymenu</code>&quot;. That's all good and dandy, but 
after that you also need to reinitialize the spy menu so it knows of the 
presence of this newly added menu item and the content it points to (in 
this case, the DIV with ID=&quot;para5&quot;). To do this, just call <code>
trigger(&quot;updatespy&quot;)</code> on the spy menu:</p>
<p class="codehighlight" align="left">$('#verticalspymenu').trigger('updatespy')</p>
<p align="left">Call this method on a spy menu whenever you've added new menu 
items to it, or if the contents the menu is spying on may have shifted position 
on the page (such as after the injection of other content onto the page, pushing 
everything else up or down). This method basically causes a re-scan and 
re-calculation of everything related to that spy menu.</p>
    </td>
  </tr>
</table>

</body>

</html>